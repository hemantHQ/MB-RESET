########################################################################################################
#                                                                                                      #
# File Name: Malware-Byte-Premium-Reset.ps1     # Output: Schedule a task that resets the              #
# Author: Ammar S.A.A                           # Malwarebytes Premium trial by changing the           #
# Version: 2.6                                  # MachineGuid registry value                           #
#                                                                                                      #
########################################################################################################
#                       https://github.com/ammarsaa/Malwarebytes-Premium-Reset                         #
########################################################################################################

# Check if the script is running with elevated privileges
$isAdmin = ([Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544"
if (-not $isAdmin) {
    Write-Host "This script requires elevated privileges. Please run it as an administrator."
    Read-Host -Prompt "Press Enter to exit..."
	Exit
}

# Define the task name, path, and description
$taskName = "Malwarebytes-Premium-Reset"
$taskPath = "\"
$taskDescription = "A task that resets the Malwarebytes Premium trial by changing the MachineGuid registry value"

# Get the current time in HH:mm format
$currentTime = (Get-Date).ToString("HH:mm")

# Define the PowerShell script for the task action
$powerShellScript = {
	New-Guid | ForEach-Object {
		Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Cryptography' -Name 'MachineGuid' -Value $_.Guid
	}
}

# Define the task action
$taskAction = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-Command $powerShellScript"

# Define the task trigger, which is daily every 13 days at the current system time
$taskTrigger = New-ScheduledTaskTrigger -Daily -DaysInterval 13 -At $currentTime
$currentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# Define the task settings, which are to run with the highest privileges and start as soon as possible if missed
$taskSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
$taskPrincipal = New-ScheduledTaskPrincipal -UserId $currentUser -RunLevel Highest

# Create the task object with the specified action, triggers, settings, and other properties
$task = New-ScheduledTask -Action $taskAction -Principal $taskPrincipal -Trigger $taskTrigger -Settings $taskSettings -Description $taskDescription

# Register the task with the specified name, path, and current user
$result = Register-ScheduledTask -TaskName $taskName -TaskPath $taskPath -InputObject $task

if ($result) {
    Write-Host "Yay! Task Scheduled Successfully."
} else {
    Write-Host "Oops! Task Failed To Be Scheduled."
}

# Code for checking if the task was completed successfully
$taskRunResult = Get-ScheduledTask -TaskName $taskName | Get-ScheduledTaskInfo

switch ($taskRunResult.LastTaskResult) {
    0 {
        Write-Host "Last Run Status: Malwarebytes Trial Was Resetted Successfully."
    }
    267011 {
        Write-Host "Status: Task has never ran but exists."
    }
    default {
        Write-Host "Last Run Status: Malwarebytes Trial Reset Failed. Last Result: $($taskRunResult.LastTaskResult)"
    }
}

# Keeps the window open
Read-Host -Prompt "Press Enter to exit..."